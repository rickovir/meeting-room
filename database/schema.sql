-- 1. Profiles Table (extends Supabase Auth)
-- Stores user-specific data.
create table public.profiles (
  id uuid not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  role text default 'user' check (role in ('user', 'admin')),
  constraint profiles_id_fkey foreign key (id) references auth.users (id) on delete cascade
);

-- 2. Rooms Table
-- Stores information about each meeting room.
create table public.rooms (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  name text not null,
  location text,
  capacity integer
);

-- 3. Bookings Table
-- The core table connecting users and rooms.
create table public.bookings (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default now() not null,
  start_time timestamp with time zone not null,
  end_time timestamp with time zone not null,
  title text not null,
  -- Foreign Keys
  user_id uuid references public.profiles (id) on delete cascade,
  room_id bigint references public.rooms (id) on delete cascade
);

-- Enable RLS (Row Level Security)
alter table public.profiles enable row level security;
alter table public.rooms enable row level security;
alter table public.bookings enable row level security;

-- Profiles RLS Policies
create policy "Users can view own profile." on public.profiles for select using ( auth.uid() = id );
create policy "Users can update own profile." on public.profiles for update using ( auth.uid() = id );

-- Rooms RLS Policies
create policy "Everyone can view rooms." on public.rooms for select using ( true );
create policy "Admins can create rooms." on public.rooms for insert with check (
  exists (select 1 from public.profiles where id = auth.uid() and role = 'admin')
);
create policy "Admins can update rooms." on public.rooms for update using (
  exists (select 1 from public.profiles where id = auth.uid() and role = 'admin')
);
create policy "Admins can delete rooms." on public.rooms for delete using (
  exists (select 1 from public.profiles where id = auth.uid() and role = 'admin')
);

-- Bookings RLS Policies
create policy "Users can create bookings." on public.bookings for insert with check ( auth.uid() = user_id );
create policy "Users can view own bookings." on public.bookings for select using ( auth.uid() = user_id );
create policy "Users can delete own bookings." on public.bookings for delete using ( auth.uid() = user_id );
create policy "Admins can view all bookings." on public.bookings for select using (
  exists (select 1 from public.profiles where id = auth.uid() and role = 'admin')
);

-- Function to handle new user profile creation
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;

-- Trigger to automatically create profile on user signup
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Insert sample rooms for testing
insert into public.rooms (name, location, capacity) values
('Conference Room A', 'Floor 1', 10),
('Conference Room B', 'Floor 2', 8),
('Meeting Room 1', 'Floor 1', 4),
('Meeting Room 2', 'Floor 3', 6),
('Executive Boardroom', 'Floor 5', 20);

-- Function to promote a user to admin (run this manually to create first admin)
create or replace function public.promote_to_admin(user_email text)
returns boolean as $$
begin
  update public.profiles set role = 'admin'
  where id = (select id from auth.users where email = user_email);
  return found;
end;
$$ language plpgsql security definer;

-- Helper function to check if current user is admin
create or replace function public.is_admin()
returns boolean as $$
begin
  return exists (
    select 1 from public.profiles
    where id = auth.uid() and role = 'admin'
  );
end;
$$ language plpgsql security definer;